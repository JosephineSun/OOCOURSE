面向对象研讨

类确定对象将会拥有的属性和方法，类是抽象概念，对象是实实在在存在的事物。
属性：是指对象所具有的功能、特征
方法：对象执行的操作
一、Java
1.Java面向对象的特征：
封装（封装属性）? 
继承（继承类或接口） 
多态（实例或运行） 
抽象（方法）
2.
Java以类class为组织单元，
定义一个类的步骤：1）.定义类名2）.编写类的属性3）.编写类的方法。
Java使用对象的步骤：
1）：创建对象（实例化）
     类名 对象名= new 类名();
2）：使用对象
　　引用对象的属性：对象名.属性
　　引用对象的方法：对象名.方法名（）
封装：
1.概念：将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提 供的方法来实现对隐藏信息的操作和访问。
2.好处：a.只能通过规定的方法访问数据；
b.隐藏类的实例细节，方便修改和实现。
3.实现步骤：修改属性的可见性（设为private）；
创建setter/getter方法（用于属性的读写）；
在setter/getter方法中加入属性控制语句（对属性值的合法性进行判断）。
Java中的this关键字
1.this关键字代表当前对象
this.属性 操作当前对象的属性
this.方法 操作当前对象的方法
2.封装对象的属性时，经常会使用到this关键字。
继承：
(1)概念：继承是类与类的一种关系，是一种“is a”的关系；
注意：java中的继承是单继承。
(2)好处：子类拥有父类的所有属性和方法（private除外）
实现了代码复用。
(3)语法规则：class 子类 extends 父类
多态：
对象的多种形态。（继承是多态体现的基础）
1.引用多态：
父类的引用可以指向本类的对象；
父类的引用可以指向子类的对象；
2.方法多态：
创建本类对象时，调用的方法为本类方法；
创建子类对象时，调用的方法为子类重写的方法或继承的方法；
引用类型转换：
1.向上类型转换（隐式/自动类型转换），是小类型到大类型的转换
2.向下类型转换（强制类型转换），是大类型到小类型的转换
3.Instanceof运算符，来解决引用对象的类型，避免类型转换的安全性问题
抽象类：
1.语法定义：
抽象类前使用abstract关键字修饰，则该类为抽象类；
2.应用场景：
A.在某些情况下，某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。
B.从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免了子类设计的随意性。
3.作用：
限制规定子类必须实现某些方法，但不关注实现细节。
4.使用规则：
A.abstract定义抽象类；
B.abstract定义抽象方法，只有声明不需要实现；（抽象方法没有方法体以分号结束）
C.包含抽象方法的类是抽象类；
D.抽象类中可以包含普通的方法，也可以没有抽象方法；
E.抽象类不能直接创建，可以定义引用变量；
接口：
1.接口的概念：
接口可以理解为一中特殊的类，由全局常量和公共的抽象方法组成。
类是一种具体实现体，而接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部数据，也不关心这些类里的方法的实现细节，它只关心这些类里必须提供某些方法。

　　
二、Python
封装
封装，顾名思义就是将内容封装到某个地方，以后再去调用被封装在某处的内容。所以，在使用面向对象的封装特性时，需要：
将内容封装到某处
从某处调用被封装的内容：1.通过对象直接调用 2.通过self间接调用
继承
继承，面向对象中的继承和现实生活中的继承相同，即：子可以继承父的内容。将多个类共有的方法提取到父类中，子类仅需继承父类而不必一一实现每个方法。
多态
Pyhon不支持多态并且也用不到多态，多态的概念是应用于Java和C#这一类强类型语言中。
三、JavaScript
封装
封装主要用于阐述对象中所包含（或封装的内容），它通常由两部分组成：
1. 相关的数据（用于存储属性）
2. 基于这些数据所能做的事（所能调用的方法）
聚合
聚合是指我们将现有对象合并成一个新对象的过程。例如：Book是由一个或多个author对象，publisher对象、若干chapter对象等组合而成的对象。
继承
通过继承这种方式，我们可以实现对现有代码的重用。例如：我们定义了一个Person对象，他包含了wolk()，sleep(),speak(),eat()等方法，也包含了age,height,weight等属性，这时当我们再定义一个coder对象的时候，则不必将上述的属性和方法都重写一遍，只需继承他即可，然后只需将coder这个对象属于他自己的那部分特殊功能写出来。
多态
上述实例中，我们的coder对象继承了person对象的一些属性和方法，这意味着这两个对象都实现了"speak"等方法，现在，我们的代码中有一个叫做James的变量，即便是我们不知道它是一个person对象还是一个coder对象的情况下，也依然可以直接调用该对象的"speak"方法。类似这种不同对象通过相同的方法调用实现各自行为的能力，我们就称之为“多态”。
总结
通过对以上三种语言的研讨，总结如下：
1.面向对象是一种编程方式，此编程方式的实现是基于对类和对象的使用
2.类是一个模板，模板中包装了多个“函数”供使用
3.对象，根据模板创建的实例（即：对象），实例用于调用被包装在类中的函数
4.面向对象三大特性：封装、继承和多态
5.什么样的代码才是面向对象？
　　从简单来说，如果程序中的所有功能都是用 类 和 对象 来实现，那么就是面向对象编程了。
6.函数式编程 和 面向对象 如何选择？分别在什么情况下使用？
　　须知：对于 C# 和 Java 程序员来说不存在这个问题，因为该两门语言只支持面向对象编程（不支持函数式编程）。而对于 Python 和 PHP 等语言却同时支持两种编程方式，且函数式编程能完成的操作，面向对象都可以实现；而面向对象的能完成的操作，函数式编程不行（函数式编程无法实现面向对象的封装功能）。
　　所以，一般在Python开发中，全部使用面向对象 或 面向对象和函数式混合使用


